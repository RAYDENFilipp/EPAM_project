{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\components\\Navbar\\Navbar.svelte",
    "..\\src\\components\\Login\\Login.svelte",
    "..\\src\\components\\Main\\Main.svelte",
    "..\\src\\components\\Contacts\\Contacts.svelte",
    "..\\src\\components\\About\\About.svelte",
    "..\\src\\components\\Navbar\\NavbarCollapse.svelte",
    "..\\src\\components\\Imageslider\\CarouselSlides.svelte",
    "..\\src\\components\\Imageslider\\CarouselButton.svelte",
    "..\\src\\components\\Main\\PostItem.svelte",
    "..\\src\\components\\Main\\SortWidget.svelte",
    "..\\src\\components\\Main\\Comment.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { pagePicked } from \"./utilities/stores\";\r\n  import Navbar from \"./components/Navbar/Navbar.svelte\";\r\n  import Login from \"./components/Login/Login.svelte\";\r\n  import Imageslider from \"./components/Imageslider/Imageslider.svelte\";\r\n  import Main from \"./components/Main/Main.svelte\";\r\n  import About from \"./components/About/About.svelte\";\r\n  import Contacts from \"./components/Contacts/Contacts.svelte\";\r\n</script>\r\n\r\n<style>\r\n  :global(body) {\r\n    height: 100vh;\r\n  }\r\n</style>\r\n\r\n<Navbar />\r\n<Login />\r\n{#if $pagePicked === '#about'}\r\n  <About />\r\n{:else if $pagePicked === '#contacts'}\r\n  <Contacts />\r\n{:else}\r\n  <Main />\r\n{/if}\r\n",
    "<script>\r\n  import NavbarCollapse from \"./NavbarCollapse.svelte\";\r\n\r\n  // used to control behaviour of the navbar-toggler\r\n  let collapse = true;\r\n</script>\r\n\r\n<style>\r\n  :global(body) {\r\n    height: 93vh;\r\n    overflow: hidden;\r\n    padding-top: 7vh;\r\n  }\r\n\r\n  nav {\r\n    min-height: 7vh;\r\n  }\r\n</style>\r\n\r\n<nav class=\"navbar fixed-top navbar-expand-md navbar-dark bg-dark\">\r\n  <h1 class=\"navbar-brand my-0 ml-lg-5 p-0\">Project: Blog</h1>\r\n  <button class=\"navbar-toggler\" on:click={() => (collapse = !collapse)}>\r\n    <span class=\"navbar-toggler-icon\" />\r\n  </button>\r\n  <NavbarCollapse collapsed={collapse} />\r\n</nav>\r\n",
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import { submitType, userLoggedIn } from \"../../utilities/stores\";\r\n  import {\r\n    sendData,\r\n    getUser,\r\n    createCookie,\r\n    getCookieFor\r\n  } from \"../../utilities/helperFunctions\";\r\n  let validated = false;\r\n\r\n  /* Here we check if there is any cookie in the browser and if so\r\nwe store that user_id in our store, userLoggedIn.\r\n*/\r\n  onMount(() => {\r\n    if (getCookieFor(\"user_id\")) {\r\n      const savedId = getCookieFor(\"user_id\");\r\n      userLoggedIn.set(parseInt(savedId, 10));\r\n      submitType.set(\"Sign Out\");\r\n    }\r\n  });\r\n\r\n  /* Submit function works in two different ways, on 'Sign In' and 'Sign Out.\r\nThe main difference between the two is that in the first case we check for a user email and password [1] in the database and get user's id into the store [2] on success. After that we update the databese that the user is online [3].\r\nFinally, we change the submitType store to switch the login buttons and create a cookie. [4]\r\nIf Signing in hasn't passed the check [1], we inform the user about that[5].\r\nOtherwise, msitake might be connected to server issues itself [6].\r\n\r\nIn the second case we check the email against the database first to make sure\r\nwe wouldn't create the very same user again [7] and if succesful we send\r\nthe request to the server and process it response in similar way as during Sign In [8].\r\nIf any failure happens, the steps are similar [9]\r\n\r\n*/\r\n  function submitLogin() {\r\n    const form = event.target;\r\n    const email = form.email.value;\r\n    const password = form.password.value;\r\n\r\n    if ($submitType === \"Sign In\") {\r\n      getUser(email, password, userLoggedIn) //[1]\r\n        .then(result => {\r\n          if (result) {\r\n            userLoggedIn.set(parseInt(result.id, 10)); //[2]\r\n            sendData(`/users/${$userLoggedIn}`, \"PATCH\", {\r\n              logged_in: true //[3]\r\n            });\r\n            submitType.set(\"Sign Out\");\r\n            alert(\"Signing In Successful\");\r\n            createCookie(\"user_id\", $userLoggedIn, 3600); //[4]\r\n          } else {\r\n            alert(\"Password and/or email are wrong\"); //[5]\r\n          }\r\n        })\r\n        .catch(e => {\r\n          alert(\r\n            `Failed at Signin in.\\nEither server might be dead or your connection lost.\\nReason: ${e.message}` //[6]\r\n          );\r\n        });\r\n    } else if ($submitType === \"Sign Up\") {\r\n      const body = {\r\n        email: email,\r\n        password: password,\r\n        username: form.username.value,\r\n        first_name: form.firstName.value,\r\n        last_name: form.lastName.value,\r\n        avatar: \"https://robohash.org/fugiatmagniatque.jpg?size=50x50&set=set1\",\r\n        logged_in: true\r\n      };\r\n      getUser(email, password, userLoggedIn).then(result => {\r\n        //[7]\r\n        if (result) {\r\n          alert(\"This user exists already\");\r\n        } else {\r\n          sendData(`/users`, \"POST\", body)\r\n            .then(response => {\r\n              if (response.ok) {\r\n                alert(\"Success\"); //[8]\r\n                submitType.set(\"Sign Out\");\r\n                return response.json();\r\n              } else {\r\n                alert(\"Failed at posting.\"); //[9]\r\n              }\r\n            })\r\n            .then(data => {\r\n              userLoggedIn.set(parseInt(data.id, 10)); //[8]\r\n              createCookie(\"user_id\", $userLoggedIn, 3600);\r\n            })\r\n            .catch(e => {\r\n              //[9]\r\n              alert(\r\n                `Failed at Signin up.\\nEither server might be dead or your connection lost.\\nReason: ${e.message}`\r\n              );\r\n            });\r\n        }\r\n      });\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  form {\r\n    background-color: white;\r\n    box-shadow: 0 13px 50px 3px black;\r\n    height: auto;\r\n    left: 50%;\r\n    position: fixed;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: 400px;\r\n    z-index: 1000;\r\n  }\r\n\r\n  @media (max-width: 576px) {\r\n    form {\r\n      width: 90%;\r\n    }\r\n  }\r\n</style>\r\n\r\n<!-- Conditional render of different forms -->\r\n{#if $submitType === 'Sign Up' || $submitType === 'Sign In'}\r\n  <form\r\n    class:was-validated={validated}\r\n    class=\"px-4 py-3 rounded-lg\"\r\n    on:submit|preventDefault={submitLogin}>\r\n    <div class=\"form-group\">\r\n      <label for=\"submitEmail\">Email address</label>\r\n      <button type=\"button\" class=\"close\" on:click={() => submitType.set('')}>\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n      <input\r\n        type=\"email\"\r\n        class=\"form-control\"\r\n        id=\"submitEmail\"\r\n        name=\"email\"\r\n        required\r\n        placeholder=\"email@example.com\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"submitPassword\">Password</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        id=\"submitPassword\"\r\n        name=\"password\"\r\n        min-lenghth=\"8\"\r\n        required\r\n        placeholder=\"Password\" />\r\n    </div>\r\n    {#if $submitType === 'Sign Up'}\r\n      <div class=\"form-group\">\r\n        <label for=\"submitUsername\">Username</label>\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          id=\"submitUsername\"\r\n          name=\"username\"\r\n          pattern=\"[\\w\\s]+\"\r\n          maxlength=\"50\"\r\n          placeholder=\"50 characters max...\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"submitFirstName\">First name</label>\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          id=\"submitFirstName\"\r\n          name=\"firstName\"\r\n          pattern=\"[\\w\\s]+\"\r\n          required\r\n          placeholder=\"your name...\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"submitLastName\">Last name</label>\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          id=\"submitLastName\"\r\n          name=\"lastName\"\r\n          pattern=\"[\\w\\s]+\"\r\n          required\r\n          placeholder=\"your Last name...\" />\r\n      </div>\r\n    {/if}\r\n    <button type=\"submit\" class=\"btn btn-primary\">{$submitType}</button>\r\n  </form>\r\n{/if}\r\n",
    "<script>\r\n  import { afterUpdate } from \"svelte\";\r\n  import { fade } from \"svelte/transition\";\r\n  import Imageslider from \"../Imageslider/Imageslider.svelte\";\r\n  import Pagination from \"./Pagination.svelte\";\r\n  import PendingSpinner from \"./PendingSpinner.svelte\";\r\n  import Post from \"./Post.svelte\";\r\n  import PostCreateForm from \"./PostCreateForm.svelte\";\r\n  import PostItem from \"./PostItem.svelte\";\r\n  import SearchWidget from \"./SearchWidget.svelte\";\r\n  import SortWidget from \"./SortWidget.svelte\";\r\n  import Footer from \"../Footer/Footer.svelte\";\r\n  import { getData } from \"../../utilities/helperFunctions\";\r\n  import {\r\n    postPicked,\r\n    searchFilter,\r\n    pageCurrent,\r\n    formPicked,\r\n    userLoggedIn,\r\n    sortDateFilter\r\n  } from \"../../utilities/stores\";\r\n\r\n  // used to bind main HTML element\r\n  let main;\r\n  // reactive declaration for fetching posts. Refreshes anytime any of inserted stores change\r\n  $: dataPromise = getData(\r\n    `/posts?${$searchFilter}${$sortDateFilter}_page=${$pageCurrent}`\r\n  );\r\n\r\n/* everytime our main window updates, i.e. we visit post, we slide pages,\r\nor main element scrolls up\r\n*/\r\n  afterUpdate(() => (main.scrollTop = 0));\r\n</script>\r\n\r\n<style>\r\n  [data-window=\"main\"] {\r\n    height: inherit;\r\n    overflow-y: scroll;\r\n  }\r\n  \r\n  [id=\"blog\"] {\r\n    height: 58vh;\r\n  }\r\n\r\n  .invisible {\r\n    display: none;\r\n  }\r\n\r\n  .failed ~ .search,\r\n  .pending ~ .search {\r\n    display: none;\r\n  }\r\n</style>\r\n\r\n<div data-window=\"main\" bind:this={main}>\r\n  <main class=\"container\">\r\n\r\n    <Imageslider />\r\n\r\n    <div class=\"row\" id=\"blog\">\r\n      <div class:invisible={$postPicked || $formPicked} class=\"col-lg-12 mt-4\">\r\n        <SortWidget />\r\n      </div>\r\n      {#await dataPromise}\r\n        <!-- Pending spinner wile data loads-->\r\n        <div class=\"pending col-md-12\">\r\n          <PendingSpinner />\r\n        </div>\r\n      {:then posts}\r\n        {#if posts.failed}\r\n        <!-- server is online but adress is wrong/changed -->\r\n          <article class=\"failed my-2 mx-auto\">\r\n            <h2 class=\"text-danger\">Can't load the page.</h2>\r\n            <p class=\"h3 text-danger\">Status: {posts.status}.</p>\r\n            <p class=\"h3 text-danger\">Reason: {posts.reason}.</p>\r\n          </article>\r\n        {:else if !$postPicked && !$formPicked}\r\n          <!-- Blog Entries Column -->\r\n          <div class=\"col-lg-8 mt-4\">\r\n          <!-- only logged in users can post -->\r\n            {#if $userLoggedIn}\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-success btn-block btn-lg mb-2\"\r\n                on:click={() => formPicked.set(true)}>\r\n                Add new post\r\n              </button>\r\n            {/if}\r\n            {#each posts as post}\r\n              <PostItem {...post} />\r\n            {/each}\r\n            <Pagination />\r\n          </div>\r\n        {:else if $formPicked}\r\n          <PostCreateForm />\r\n        {:else}\r\n          <Post />\r\n        {/if}\r\n        <!-- if server is down -->\r\n      {:catch error}\r\n        <!-- On error message -->\r\n        <article class=\"failed my-4 mx-auto\">\r\n          <h2 class=\"text-danger\">Failed at loading data.</h2>\r\n          <p class=\"h3\">{error.message}</p>\r\n          <p class=\"h3\">It seems the server is...dead</p>\r\n        </article>\r\n      {/await}\r\n      <div class:invisible={$postPicked || $formPicked} class=\"search col-lg-4\">\r\n        <SearchWidget />\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </main>\r\n<Footer />\r\n</div>\r\n",
    "<script>\r\n  import Footer from \"../Footer/Footer.svelte\";\r\n</script>\r\n\r\n<style>\r\n  [id=\"contacts\"] {\r\n    height: inherit;\r\n    overflow: auto;\r\n  }\r\n\r\n  iframe {\r\n    height: 63vh;\r\n    width: inherit;\r\n  }\r\n</style>\r\n\r\n<div id=\"contacts\">\r\n  <div class=\"container w-100\">\r\n    <article class=\"row justify-content-around align-items-center\">\r\n      <!-- Contacts info -->\r\n      <section class=\"col-8 pt-4\">\r\n        <h2 class=\"text-uppercase text-center w-40\">Find us</h2>\r\n        <p class=\"h5 mb-0 w-40\">\r\n          Solomianska St, 7,\r\n          <br />\r\n          Kyiv, 03110\r\n        </p>\r\n        <br />\r\n        <a\r\n          class=\"btn btn-info btn-social mx-1\"\r\n          href=\"https://www.facebook.com/\"\r\n          target=\"_blank\"\r\n          aria-label=\"Visit us at Facebook\"\r\n          rel=\"noreferrer\">\r\n          <i class=\"fab fa-facebook-f\" />\r\n        </a>\r\n        <a\r\n          class=\"btn btn-info btn-social mx-1\"\r\n          href=\"https://twitter.com/?lang=en\"\r\n          target=\"_blank\"\r\n          aria-label=\"Visit us at Twitter\"\r\n          rel=\"noreferrer\">\r\n          <i class=\"fab fa-twitter\" />\r\n        </a>\r\n        <a\r\n          class=\"btn btn-info btn-social mx-1\"\r\n          href=\"https://www.linkedin.com/\"\r\n          target=\"_blank\"\r\n          aria-label=\"Visit us at Linked-In\"\r\n          rel=\"noreferrer\">\r\n          <i class=\"fab fa-linkedin-in\" />\r\n        </a>\r\n      </section>\r\n\r\n      <!-- Map -->\r\n      <div class=\"row col-12 pb-3 mt-3\">\r\n        <iframe\r\n          class=\"border-0 mx-auto w-md-50\"\r\n          title=\"State University of Telecommunications on the map\"\r\n          src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d12090.613512847922!2d30.46984709125832!3d50.4273456508177!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x638e8cfbdbe5fddc!2sState+University+of+Telecommunications!5e0!3m2!1sen!2sua!4v1564161731057!5m2!1sen!2sua\"\r\n          allowfullscreen />\r\n      </div>\r\n    </article>\r\n  </div>\r\n  <Footer />\r\n</div>\r\n",
    "<script>\r\n  import img1 from \"../../media/about_cabins.jpg\";\r\n  import img2 from \"../../media/about_space.jpg\";\r\n  import img3 from \"../../media/about_tree.jpg\";\r\n  import Footer from \"../Footer/Footer.svelte\";\r\n</script>\r\n\r\n<style>\r\n  [id=\"about\"] {\r\n    height: inherit;\r\n    overflow-y: scroll;\r\n  }\r\n\r\n  img {\r\n    height: 23vw;\r\n    object-fit: cover;\r\n    object-position: center bottom;\r\n    width: 32vh;\r\n  }\r\n\r\n  @media (max-width: 1000px) {\r\n    img {\r\n      height: 60vw;\r\n      width: 83vw;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div id=\"about\" class=\"w-100 pt-2\">\r\n  <article class=\"col-sm-8 my-5 mx-auto\">\r\n    <h2 class=\"text-center\">About</h2>\r\n    <section>\r\n      <h3>Sub-header 1</h3>\r\n      <p>\r\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut fringilla,\r\n        sem ac molestie pellentesque, massa purus consequat tellus, ac cursus\r\n        sapien erat a nisi. Integer congue lectus id odio vestibulum\r\n        scelerisque. Nam sed nibh ex. Pellentesque in placerat sem. Duis quis\r\n        arcu vel nibh hendrerit scelerisque. Suspendisse eget nisi eu velit\r\n        suscipit semper. Proin lacinia, ligula ut rutrum ornare, nunc lacus\r\n        pretium neque, vitae venenatis ex mauris ac dolor. Ut non purus nec\r\n        tortor tincidunt interdum. Sed egestas neque dui, quis vehicula eros\r\n        lobortis quis. Quisque vel congue velit.\r\n      </p>\r\n    </section>\r\n    <section>\r\n      <h3>Sub-header 2</h3>\r\n      <p>\r\n        Ut odio tellus, sodales eget luctus in, rhoncus sed mi. Nulla nec semper\r\n        nisi, et fermentum neque. Morbi at rhoncus libero. Nulla nec tincidunt\r\n        massa. Suspendisse ac tempor massa, at lacinia dui. Orci varius natoque\r\n        penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nulla\r\n        vestibulum lorem quis nisl finibus ornare. Ut pretium consequat mi, sed\r\n        consectetur leo cursus nec. Proin felis sem, scelerisque ac laoreet nec,\r\n        fringilla ac nisi. Fusce eget pulvinar ante. Phasellus porta scelerisque\r\n        elit eu luctus. In dapibus purus nec quam sodales, a feugiat metus\r\n        gravida. Etiam consectetur iaculis rhoncus. Praesent eu metus ut lacus\r\n        eleifend maximus nec ac ipsum. Aenean pharetra, justo quis sodales\r\n        aliquet, risus tortor iaculis libero, eget tincidunt ipsum metus sit\r\n        amet eros. Nullam quis nibh sed arcu vehicula efficitur.\r\n      </p>\r\n    </section>\r\n    <section>\r\n      <h3>Sub-header 3</h3>\r\n      <div class=\"d-flex flex-lg-row flex-column align-items-center mx-auto\">\r\n        <img class=\"col mt-2\" src={img1} alt=\"cabins\" />\r\n        <img class=\"col mt-2\" src={img2} alt=\"space\" />\r\n        <img class=\"col mt-2\" src={img3} alt=\"tree\" />\r\n      </div>\r\n\r\n    </section>\r\n\r\n  </article>\r\n\r\n<Footer />\r\n</div>\r\n",
    "<script>\r\n  import { deleteCookie, sendData } from \"../../utilities/helperFunctions\";\r\n  import { submitType, userLoggedIn, pagePicked } from \"../../utilities/stores\";\r\n  export let collapsed = true;\r\n\r\n  let links = [\r\n    { active: true, href: \"#home\", text: \"Home\" },\r\n    { active: false, href: \"#about\", text: \"About\" },\r\n    { active: false, href: \"#contacts\", text: \"Contacts\" }\r\n  ];\r\n  // links get highlighted on select\r\n  function handleClick(active, href, e) {\r\n    if (!active) {\r\n      links = links.map(link => {\r\n        link.active =\r\n          link.href === href || link.active ? !link.active : link.active;\r\n        return link;\r\n      });\r\n    }\r\n    // used for selective rendering on the App component\r\n    pagePicked.set(href);\r\n  }\r\n</script>\r\n\r\n<style>\r\n  @media (min-width: 768px) {\r\n    li {\r\n      border-right: 0.2rem solid;\r\n      min-width: 5rem;\r\n    }\r\n\r\n    li:first-child {\r\n      border-left: 0.2rem solid;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class:collapse={collapsed} class=\"navbar-collapse\">\r\n  <ul class=\"navbar-nav mr-auto\">\r\n    {#each links as { active, href, text }}\r\n      <li class:active class=\"nav-item border-light text-md-center\">\r\n        <a class=\"nav-link\" {href} on:click={e => handleClick(active, href, e)}>\r\n          {text}\r\n          {#if active}\r\n            <span class=\"sr-only\">(current)</span>\r\n          {/if}\r\n        </a>\r\n      </li>\r\n    {/each}\r\n  </ul>\r\n  <div class=\"form-inline mt-2 mt-md-0 mr-lg-2\">\r\n    <!-- selective rendering of login buttons depending on wheter user logged in or not -->\r\n    {#if $submitType === 'Sign Out'}\r\n      <!-- clears the cookie and the stores -->\r\n      <button\r\n        class=\"btn btn-outline-danger my-2 my-sm-0\"\r\n        on:click={() => {\r\n          deleteCookie('user_id', -5);\r\n          submitType.set('');\r\n          sendData(`/users/${$userLoggedIn}`, 'PATCH', { logged_in: false });\r\n          userLoggedIn.set(null);\r\n        }}>\r\n        Sign out\r\n      </button>\r\n    {:else}\r\n      <!-- opens a 'Sign In' modal -->\r\n      <button\r\n        class=\"btn btn-outline-light mr-sm-2\"\r\n        on:click={() => submitType.set('Sign In')}>\r\n        Sign In\r\n      </button>\r\n      <!-- opens a 'Sign Up' modal -->\r\n      <button\r\n        class=\"btn btn-outline-light my-2 my-sm-0\"\r\n        on:click={() => submitType.set('Sign Up')}>\r\n        Sign Up\r\n      </button>\r\n    {/if}\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  import { slideIndex } from \"../../utilities/stores\";\r\n  import { fade } from \"svelte/transition\";\r\n\r\n  /* Media to bundle */\r\n  import img1 from \"../../media/img_lights_wide.jpg\";\r\n  import img2 from \"../../media/img_mountains_wide.jpg\";\r\n  import img3 from \"../../media/img_nature_wide.jpg\";\r\n\r\n  let images = [\r\n    {\r\n      id: 0,\r\n      src: img1,\r\n      caption: \"First title\",\r\n      color: \"text-light\"\r\n    },\r\n    {\r\n      id: 1,\r\n      src: img2,\r\n      caption: \"Second Title\",\r\n      color: \"text-light\"\r\n    },\r\n    {\r\n      id: 2,\r\n      src: img3,\r\n      caption: \"Third Title\",\r\n      color: \"text-light\"\r\n    }\r\n  ];\r\n\r\n  /** with this 'reactive declaration' we can handle change of the store's value\r\n   * and draw a respective slider\r\n   * */\r\n  $: itemtoDraw = images[$slideIndex];\r\n</script>\r\n\r\n<style>\r\n  .carousel {\r\n    background: no-repeat center center scroll;\r\n    background-size: cover;\r\n    height: 250px;\r\n  }\r\n\r\n  @media (max-width: 500px) {\r\n    .carousel {\r\n      height: 200px;\r\n    }\r\n    .carousel__caption {\r\n      width: 65%;\r\n    }\r\n  }\r\n\r\n  .carousel__caption--transparent {\r\n    opacity: 0.8;\r\n  }\r\n</style>\r\n\r\n<div class=\"carousel-inner\">\r\n\r\n  {#each images as { id, src, caption, color }}\r\n    <!-- one of the ways we can render only one slider to the DOM instead of three -->\r\n    {#if $slideIndex === id}\r\n    <!-- Slider with picture inside -->\r\n      <div\r\n        class:active={id === $slideIndex}\r\n        class=\"carousel carousel-item d-flex flex-column justify-content-center\r\n        align-items-center\"\r\n        style=\"background-image: url({src});\"\r\n        transition:fade>\r\n        <!-- Slider's caption -->\r\n        <section\r\n          class=\"carousel__caption carousel__caption--transparent {color}\r\n          bg-dark px-2 mx-auto my-5\">\r\n          <h2>{caption}</h2>\r\n          <p class=\"h5\">This is a paragraph for the {caption}.</p>\r\n        </section>\r\n      </div>\r\n    {/if}\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  export let direction;\r\n  export let screenReaderValue;\r\n</script>\r\n\r\n<style>\r\n  button {\r\n    background: transparent;\r\n    max-width: 4rem;\r\n    outline: none;\r\n    text-decoration: none;\r\n  }\r\n\r\n  button:focus {\r\n    opacity: 0.5;\r\n  }\r\n</style>\r\n\r\n<button class=\"carousel-control-{direction} border-0\" on:click>\r\n  <span class=\"carousel-control-{direction}-icon\" aria-hidden=\"true\" />\r\n  <span class=\"sr-only\">{screenReaderValue}</span>\r\n</button>\r\n",
    "<script>\r\n  import {\r\n    getData,\r\n    parseDate,\r\n    sendData\r\n  } from \"../../utilities/helperFunctions\";\r\n  import {\r\n    postPicked,\r\n    postObject,\r\n    pageCurrent,\r\n    searchFilter,\r\n    userLoggedIn\r\n  } from \"../../utilities/stores\";\r\n\r\n  export let id, title, slogan, text, author_id, date, comments;\r\n  const { month, year, datePrefixed, hours, minutes } = parseDate(date);\r\n  // get author's info\r\n  const userPromise = getData(`/users/${author_id}`);\r\n\r\n  // used to hide a deleted post visually until next refresh from the database\r\n  let deleted = false;\r\n\r\n  function revealPost() {\r\n    postPicked.set(true);\r\n    postObject.set({\r\n      id: id,\r\n      title: title,\r\n      slogan: slogan,\r\n      text: text,\r\n      authorPromise: userPromise,\r\n      date: {\r\n        month: month,\r\n        year: year,\r\n        datePrefixed: datePrefixed,\r\n        hours: hours,\r\n        minutes: minutes\r\n      },\r\n      comments: comments\r\n    });\r\n  }\r\n\r\n  function deletePost() {\r\n    sendData(`/posts/${id}`, \"DELETE\")\r\n      .then(response => {\r\n        if (response.ok) {\r\n          alert(\"Success\");\r\n        } else {\r\n          alert(\"Failed at deleting the post\");\r\n        }\r\n      })\r\n      .catch(e => {\r\n        alert(\r\n          `Failed at deleting the post.\\nEither server might be dead or your connection lost.\\nReason: ${e.message}`\r\n        );\r\n      });\r\n    // reload the current page so changes are visible\r\n    deleted = true;\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .deleted {\r\n    display: none;\r\n  }\r\n</style>\r\n\r\n{#await userPromise then user}\r\n  <div class:deleted class=\"card mb-4\">\r\n    <div class=\"card-body\">\r\n      <div class=\"d-flex justify-content-between align-items-start mt-0\">\r\n        <h2 class=\"card-title\">{title}</h2>\r\n        <!-- only author of this post can delete it -->\r\n        {#if author_id === $userLoggedIn}\r\n          <button type=\"button\" class=\"btn btn-danger\" on:click={deletePost}>\r\n            <i class=\"far fa-trash-alt\" />\r\n          </button>\r\n        {/if}\r\n      </div>\r\n      <p class=\"card-text\">{slogan}</p>\r\n      <button class=\"btn btn-primary\" on:click={revealPost}>Read More →</button>\r\n    </div>\r\n    <div class=\"card-footer text-muted\">\r\n      Posted on {month} {datePrefixed}, {year} {hours}:{minutes} by\r\n      <em>{user.first_name} {user.last_name}</em>\r\n    </div>\r\n  </div>\r\n{/await}\r\n",
    "<script>\r\n  import { getData, debounce } from \"../../utilities/helperFunctions\";\r\n  import { searchFilter, sortDateFilter } from \"../../utilities/stores\";\r\n\r\n  let checked = false;\r\n// sets sort order on the database for Main component\r\n  $: if (checked) {\r\n    sortDateFilter.set(\"_sort=date&_order=asc&\");\r\n  } else {\r\n    sortDateFilter.set(\"_sort=date&_order=desc&\");\r\n  }\r\n</script>\r\n\r\n<style>\r\n  input {\r\n    display: none;\r\n  }\r\n\r\n  label::after {\r\n    border-bottom: 0;\r\n    border-left: 0.3em solid transparent;\r\n    border-right: 0.3em solid transparent;\r\n    border-top: 0.3em solid;\r\n    content: \"\";\r\n    display: inline-block;\r\n    margin-left: 0.255em;\r\n    vertical-align: 0.255em;\r\n  }\r\n\r\n  input:checked + label::after {\r\n    border-bottom: 0.3em solid;\r\n    border-top: 0;\r\n  }\r\n</style>\r\n\r\n<div class=\"ml-1\">\r\n  <input type=\"checkbox\" id=\"dateSort\" bind:checked />\r\n  <label for=\"dateSort\" class=\"h5\">Date</label>\r\n</div>\r\n",
    "<script>\r\n  import {\r\n    getData,\r\n    parseDate,\r\n    sendData\r\n  } from \"../../utilities/helperFunctions\";\r\n  import { postObject, userLoggedIn } from \"../../utilities/stores\";\r\n\r\n  export let user_id, comment, date, index, authorId;\r\n\r\n  // derived comments and postId from the store\r\n  let comments = $postObject.comments;\r\n  let postId = $postObject.id;\r\n\r\n  const { month, year, datePrefixed, hours, minutes } = parseDate(date);\r\n  // here we get all teh users to fetch their avatars, names etc.\r\n  const userPromise = getData(`/users/${user_id}`);\r\n\r\n  function deleteComment() {\r\n    comments.splice(index, 1);\r\n    sendData(`/posts/${postId}`, \"PATCH\", { comments: comments })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          // to trigger reactive rerender we should update our store\r\n          postObject.update(n => {\r\n            n.comments = comments;\r\n            return n;\r\n          });\r\n        } else {\r\n          alert(\"Failed at deleting the comment\");\r\n        }\r\n      })\r\n      .catch(e => {\r\n        alert(\r\n          `Failed at deleting the comment.\\nEither server might be dead or your connection lost.\\nReason: ${e.message}`\r\n        );\r\n      });\r\n  }\r\n</script>\r\n\r\n<style>\r\n/* green circle near user's avatars that are online */\r\n  .logged-in::before {\r\n    border: 4px solid green;\r\n    border-radius: 50%;\r\n    bottom: -2.5rem;\r\n    box-shadow: 0 0 8px 1px green;\r\n    content: \"\";\r\n    display: block;\r\n    left: 1rem;\r\n    position: relative;\r\n    width: 4px;\r\n  }\r\n</style>\r\n\r\n{#await userPromise then user}\r\n  <section class:logged-in={user.logged_in} class=\"media mb-4\">\r\n    <img\r\n      class=\"d-flex mr-3 rounded-circle\"\r\n      src={user.avatar}\r\n      alt=\"Avatar {user_id}\" />\r\n    <div class=\"media-body\">\r\n      <div class=\"d-flex justify-content-between mt-0\">\r\n        <h5>{user.first_name} {user.last_name}</h5>\r\n        <!-- only comment author and post owner can delete comments -->\r\n        {#if $userLoggedIn === user_id || authorId === $userLoggedIn}\r\n          <button type=\"button\" class=\"btn btn-danger\" on:click={deleteComment}>\r\n            <i class=\"far fa-trash-alt\" />\r\n          </button>\r\n        {/if}\r\n      </div>\r\n      <p>{hours}:{minutes}, {month} {datePrefixed}, {year}</p>\r\n      <p>{comment}</p>\r\n    </div>\r\n  </section>\r\n{/await}\r\n"
  ],
  "names": [],
  "mappings": "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"
}